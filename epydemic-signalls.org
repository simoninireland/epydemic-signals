#+title: epydemic-signals

* epydemic-signals: An experiment in epidemic modelling using signal processing :PROJECT:

** Release planning

*** Release 0.1.1


** Design

*** Getting the event traces

    Signal generation needs an event stream. There are at least three
    ways to get one:

    1. Save the hitting and healing times of an SIR process, then
       interleave them into a single stream
    2. Tap the events from a simulation explicitly, into an
       experimental result, variable, or file
    3. Tap events directly into the signal generator

    Option 1 is the most flexible. It depends on there being enough
    information in that's been captured to generate the events of
    interest: if one didn't grab the healing times, for example, one
    couldn't re-create the removal events. It's therefore a bit
    fragile.

    Option 2 saves the event trace for later, and would work well with
    parallel processing: just another field in the results. This is
    probably the most flexible approach, and persists the event trace
    for further analysis if required.

    Option 3 is direct and feels quite sensible, although it wouldn't
    work as well with parallel processing as the signal probably can't
    be encoded into epyc's results dicts. (Although HDF5 can handle
    multi-dimensional arrays, so it might be possible.) It's possible
    that we wouldn't need to do signal extraction at scale, so the
    lack of parallelism might not matter.

    For options 2 and 3 we need to tap the event stream. epydemic
    v1.8.1 adds optional names to events, and adds names to all the
    reference models. We can therefore sub-class the Dynamics classes
    and add a function to wrap all the event functions as they're
    registered so that they call a signal generator object as
    well. (We can do this by overriding the registration methods, of
    which there are three.) The signal generator could be just a
    recorder (which would then need to be called when experimental
    results are created at the end of the experiment) or a "proper"
    signal generator.

    For flexibility the signal generators should be able to be passed
    events either individually (in increasing time order) or as a
    list. That means we can use them inline or post facto.
